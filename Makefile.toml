[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = ["native/identity-client"]
ANDROID_PLATFORM_VERSION = "28"
DEV = true
RELEASE = false

[env.release]
RELEASE = true
DEV = false

[tasks.test-flow]
disabled = true

[tasks.build]
description = "Runs the rust compiler."
category = "Build"
dependencies = ["android", "cbindgen", "dart-bindgen"]

[tasks.build.mac]
description = "Runs the rust compiler."
category = "Build"
dependencies = ["android", "ios", "ios-release", "post-ios", "cbindgen", "dart-bindgen"]

[tasks.ios]
condition = { platforms = ["mac"], env_true = ["DEV"] }
description = "Build ios targets."
category = "Build"
command = "cargo"
args = ["lipo"]

[tasks.ios-release]
condition = { platforms = ["mac"], env_true = ["RELEASE"] }
description = "Build ios targets."
category = "Build"
command = "cargo"
args = ["lipo", "--release"]

[tasks.post-ios]
script_runner = "@duckscript"
condition = { platforms = ["mac"] }
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/universal/debug/lib${CARGO_MAKE_CRATE_FS_NAME}.a \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/ios/lib${CARGO_MAKE_CRATE_FS_NAME}.a
    """,
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/binding.h \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/ios/Classes/binding.h
    """,
]

[tasks.android]
description = "Build android targets."
category = "Build"
dependencies = [
    "pre-android",
    "android-aarch64",
    "android-aarch64-release",
    "post-android-aarch64",
    "android-armv7",
    "android-armv7-release",
    "post-android-armv7",
    "android-i686",
    "android-i686-release",
    "post-android-i686",
]

[tasks.android-aarch64]
private = true
condition = { env_true = ["DEV"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "aarch64-linux-android", 
  "build",
  ]

[tasks.android-armv7]
private = true
condition = { env_true = ["DEV"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "armv7-linux-androideabi", 
  "build",
  ]

[tasks.android-i686]
private = true
condition = { env_true = ["DEV"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "i686-linux-android", 
  "build"
  ]

[tasks.android-aarch64-release]
private = true
condition = { env_true = ["RELEASE"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "aarch64-linux-android", 
  "build",
  "--release"
  ]

[tasks.android-armv7-release]
private = true
condition = { env_true = ["RELEASE"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "armv7-linux-androideabi", 
  "build",
  "--release"
  ]

[tasks.android-i686-release]
private = true
condition = { env_true = ["RELEASE"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "i686-linux-android", 
  "build",
  "--release"
  ]

[tasks.pre-android]
private = true
script_runner = "@duckscript"
script = [
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/arm64-v8a",
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/armeabi-v7a",
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/x86",
]

[tasks.post-android-aarch64]
private = true
script_runner = "@duckscript"
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/aarch64-linux-android/debug/lib${CARGO_MAKE_CRATE_FS_NAME}.so \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/arm64-v8a/lib${CARGO_MAKE_CRATE_FS_NAME}.so
    """,
]

[tasks.post-android-armv7]
private = true
script_runner = "@duckscript"
script = [
  """
  cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/armv7-linux-androideabi/debug/lib${CARGO_MAKE_CRATE_FS_NAME}.so \
  ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/armeabi-v7a/lib${CARGO_MAKE_CRATE_FS_NAME}.so
  """,
]

[tasks.post-android-i686]
private = true
script_runner = "@duckscript"
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/i686-linux-android/debug/lib${CARGO_MAKE_CRATE_FS_NAME}.so \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/x86/lib${CARGO_MAKE_CRATE_FS_NAME}.so
    """,
]


[tasks.cbindgen]
command = "cbindgen"
args = [
  "--config",
  "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/cbindgen.toml",
  "--crate",
  "${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}",
  "--output",
  "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/binding.h"
]


[tasks.dart-bindgen]
command = "dart-bindgen"
args = [
  "--input",
  "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/binding.h",
  "--output",
  "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/lib/ffi.dart",
  "--name",
  "lib${CARGO_MAKE_CRATE_FS_NAME}",
  "--android",
  "lib${CARGO_MAKE_CRATE_FS_NAME}.so",
  "--ios",
  "executable",
  "--allo-isolate"
]
